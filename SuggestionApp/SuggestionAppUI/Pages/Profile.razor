@page "/Profile"
@attribute [Authorize]
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

<h1>My Profile</h1>

<div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

<div>
    <h2>My Account</h2>
    <p>
        <a href="MicrosoftIdentity/Account/EditProfile">Edit My Profile</a>
    </p>
</div>

@if(approved?.Count > 0){
    <h2>Approved Suggestions</h2>
    <p>These are your suggestions that are currently active.</p>
    @foreach (var s in approved)
    {
        <hr />
        <dvi>
            @s.Suggestion
        </dvi>
        <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
        <p>Total Votes: @s.UserVotes.Count</p>
        <p>@s.Category.CategoryName</p>
        <p>@s.Description</p>
        @if (@s.SuggestionStatus is not null)
        {
            <div>@s.SuggestionStatus.StatusName</div>
            <p>@((MarkupString)s.OwnerNotes)</p>
        }
    }

}

@if(archived?.Count > 0){
    <h2>Archived Suggestions</h2>
    <p>These are your suggestions that are currently archived.</p>
    @foreach (var s in archived)
    {
        <hr />
        <dvi>
            @s.Suggestion
        </dvi>
        <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
        <p>Total Votes: @s.UserVotes.Count</p>
        <p>@s.Category.CategoryName</p>
        <p>@s.Description</p>
        @if (@s.SuggestionStatus is not null)
        {
            <div>@s.SuggestionStatus.StatusName</div>
            <p>@((MarkupString)s.OwnerNotes)</p>
        }
    }

}

@if(pending?.Count > 0){
    <h2>Pending Suggestions</h2>
    <p>These are your suggestions that are currently pending.</p>
    @foreach (var s in pending)
    {
        <hr />
        <dvi>
            @s.Suggestion
        </dvi>
        <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
        <p>Total Votes: @s.UserVotes.Count</p>
        <p>@s.Category.CategoryName</p>
        <p>@s.Description</p>
        @if (@s.SuggestionStatus is not null)
        {
            <div>@s.SuggestionStatus.StatusName</div>
            <p>@((MarkupString)s.OwnerNotes)</p>
        }
    }

}

@if(rejected?.Count > 0){
    <h2>Rejected Suggestions</h2>
    <p>These are your suggestions that are currently rejected.</p>
    @foreach (var s in rejected)
    {
        <hr />
        <dvi>
            @s.Suggestion
        </dvi>
        <p>@s.DateCreated.ToString("MM.dd.yyyy")</p>
        <p>Total Votes: @s.UserVotes.Count</p>
        <p>@s.Category.CategoryName</p>
        <p>@s.Description</p>
        @if (@s.SuggestionStatus is not null)
        {
            <div>@s.SuggestionStatus.StatusName</div>
            <p>@((MarkupString)s.OwnerNotes)</p>
        }
    }

}


@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        var results = await suggestionData.GetUsersSuggestions(loggedInUser.Id);

        if (loggedInUser is not null && results is not null)
        {
            submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            approved = submissions.Where(s => s.ApprovedForRelease && s.Archived == false & s.Rejected == false).ToList();
            archived = submissions.Where(s => s.Archived & s.Rejected == false).ToList();
            pending = submissions.Where(s => s.ApprovedForRelease == false & s.Rejected == false).ToList();
            rejected = submissions.Where(s => s.Rejected == true).ToList();
        }

    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

}

